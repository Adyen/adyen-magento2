<?php
/**
 *
 * Adyen Payment module (https://www.adyen.com/)
 *
 * Copyright (c) 2015 Adyen BV (https://www.adyen.com/)
 * See LICENSE.txt for license details.
 *
 * Author: Adyen <magento@adyen.com>
 */

/**
 * @var \Adyen\Payment\Block\Checkout\Success $block
 */
?>
<script type="text/javascript">
    // Refresh cart status
    require(['Magento_Customer/js/customer-data'], function (customerData) {
        'use strict';

        customerData.reload(['cart'], true);
    });
</script>
<?php if ($block->renderAction()): ?>
    <script type="text/javascript">
        require([
            'jquery',
            'Adyen_Payment/js/adyen'
        ], function ($, AdyenWeb) {
        (async function () { // RequireJS does not support async callback
            var action = JSON.parse('<?= /* @noEscape */ $block->getAction(); ?>');
            var checkoutComponent = await window.AdyenWeb.AdyenCheckout({
                locale: '<?= $block->escapeJs($block->getLocale()); ?>',
                countryCode: '<?= $block->escapeJs($block->getOrder()->getBillingAddress()->getCountryId()); ?>',
                environment: '<?= $block->escapeJs($block->getEnvironment()); ?>',
                clientKey: '<?= $block->escapeJs($block->getClientKey()); ?>'
            });
            try {
                checkoutComponent.createFromAction(action).mount('#ActionContainer');
            } catch(err) {
                // Action component cannot be created
            }
        })();
        });
    </script>
    <div id="ActionContainer"></div>
<?php endif; ?>

<?php if ($block->showAdyenGiving()):
    $checkoutConfig = /* @noEscape */
    $block->getSerializedCheckoutConfig();
    $scriptString = __('window.checkoutConfig = %1;', $checkoutConfig);
    ?>
    <div id="donation-container"></div>
    <script>
        <?= /* @noEscape */ $scriptString ?>
        require([
            'jquery',
            'mage/storage',
            'Adyen_Payment/js/adyen',
            'Adyen_Payment/js/model/adyen-payment-service'
        ], function ($, storage, AdyenWeb, adyenPaymentService) {
            (async function () {
                const currency = '<?= $block->escapeJs($block->getOrder()->getOrderCurrencyCode()) ?>';
                const locale = '<?= $block->escapeJs($block->getLocale()) ?>';
                const environment = '<?= $block->escapeJs($block->getEnvironment()) ?>';
                const clientKey = '<?= $block->escapeJs($block->getClientKey()) ?>';
                const orderId = '<?= $block->escapeJs($block->getOrder()->getId()) ?>';
                const isLoggedIn = Boolean(<?= $block->escapeJs($block->getIsCustomerLoggedIn()) ?>);
                const maskedQuoteId = '<?= $block->escapeJs($block->getMaskedQuoteId()) ?>';

                try {
                    const payload = {
                        currency: currency,
                        locale: locale
                    };

                    const response = JSON.parse(await adyenPaymentService.donationCampaigns(payload, isLoggedIn, orderId, maskedQuoteId));
                    if (response?.donationCampaigns?.length > 0) {
                        const campaign = response.donationCampaigns[0]; // Only support 1 campaign currently
                        await mountAdyenGivingComponent(campaign);
                    }
                } catch (error) {
                    console.error('Failed to fetch donation campaigns:', error);
                }

                async function mountAdyenGivingComponent(campaign) {
                    try {
                        const checkoutComponent = await window.AdyenWeb.AdyenCheckout({
                            locale: locale,
                            countryCode: '<?= $block->escapeJs($block->getOrder()->getBillingAddress()->getCountryId()); ?>',
                            environment: environment,
                            clientKey: clientKey
                        });

                        const donationConfig = {
                            ...campaign,
                            onDonate: handleOnDonate,
                            onCancel: handleOnCancel,

                        };
                        adyenGivingComponent = new window.AdyenWeb.Donation(
                            checkoutComponent,
                            donationConfig,
                        );
                        adyenGivingComponent.mount('#donation-container');
                    } catch (error) {
                        console.error('Failed to initialize Adyen Giving component:', error);
                    }
                }

                function handleOnDonate(state, component) {
                    if (state.isValid) {
                        const payload = state.data;
                        payload.returnUrl = window.location.href;
                        payload.id = component.props.reference;
                        debugger;
                        adyenPaymentService.donate(payload, isLoggedIn, orderId, maskedQuoteId)
                            .done(function () {
                                component.setStatus('success');
                            })
                            .fail(function () {
                                component.setStatus('error');
                            });
                    } else {
                        component.setStatus('ready');
                    }
                }

                function handleOnCancel(state, component) {
                    window.location.href = $('.primary.action.continue')[0]?.href || '/';
                }
            })();
        });
    </script>
<?php endif; ?>

